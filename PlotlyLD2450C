type: custom:plotly-graph
title: 1.LD2450
refresh_interval: 0.2
hours_to_show: current_day
ha_theme: true
layout:
  legend:
    'y': 600
    orientation: h
  autosize: true
  margin:
    autoexpand: true
    l: 50
    r: 20
    t: 20
    b: 40
  showlegend: true
  xaxis:
    dtick: 100
    gridcolor: RGBA(200,200,200,0.15)
    zerolinecolor: RGBA(200,200,200,0.15)
    type: number
    fixedrange: true
    range:
      - 600
      - -600
  yaxis:
    dtick: 100
    gridcolor: RGBA(200,200,200,0.15)
    zerolinecolor: RGBA(200,200,200,0.15)
    scaleanchor: x
    scaleratio: 1
    fixedrange: true
    range:
      - 600
      - 0
entities:
  - entity: ''
    name: Person1
    show_value: true
    unit_of_measurement: cm
    marker:
      size: 12
    line:
      shape: spline
      width: 5
    x:
      - $ex hass.states["sensor.ld2450_p0x"].state
    'y':
      - $ex hass.states["sensor.ld2450_p0y"].state
  - entity: ''
    name: Person2
    show_value: true
    unit_of_measurement: cm
    marker:
      size: 12
    line:
      shape: spline
      width: 5
    x:
      - $ex hass.states["sensor.ld2450_p1x"].state
    'y':
      - $ex hass.states["sensor.ld2450_p1y"].state
  - entity: ''
    name: Person3
    show_value: true
    unit_of_measurement: cm
    marker:
      size: 12
    line:
      shape: spline
      width: 5
    x:
      - $ex hass.states["sensor.ld2450_p2x"].state
    'y':
      - $ex hass.states["sensor.ld2450_p2y"].state
  - entity: ''
    name: Zone1
    mode: lines
    fill: toself
    fillcolor: RGBA(20,200,0,0.1)
    line:
      color: RGBA(20,200,0,0.2)
      shape: line
      width: 2
    x:
      - $ex hass.states["number.ld2450_r0x0"].state
      - $ex hass.states["number.ld2450_r0x0"].state
      - $ex hass.states["number.ld2450_r0x1"].state
      - $ex hass.states["number.ld2450_r0x1"].state
      - $ex hass.states["number.ld2450_r0x0"].state
    'y':
      - $ex hass.states["number.ld2450_r0y0"].state
      - $ex hass.states["number.ld2450_r0y1"].state
      - $ex hass.states["number.ld2450_r0y1"].state
      - $ex hass.states["number.ld2450_r0y0"].state
      - $ex hass.states["number.ld2450_r0y0"].state
  - entity: ''
    name: Zone2
    mode: lines
    fill: toself
    fillcolor: RGBA(200,0,255,0.1)
    line:
      color: RGBA(200,0,255,0.2)
      shape: line
      width: 2
    x:
      - $ex hass.states["number.ld2450_r1x0"].state
      - $ex hass.states["number.ld2450_r1x0"].state
      - $ex hass.states["number.ld2450_r1x1"].state
      - $ex hass.states["number.ld2450_r1x1"].state
      - $ex hass.states["number.ld2450_r1x0"].state
    'y':
      - $ex hass.states["number.ld2450_r1y0"].state
      - $ex hass.states["number.ld2450_r1y1"].state
      - $ex hass.states["number.ld2450_r1y1"].state
      - $ex hass.states["number.ld2450_r1y0"].state
      - $ex hass.states["number.ld2450_r1y0"].state
  - entity: ''
    name: Zone3
    mode: lines
    fill: toself
    fillcolor: RGBA(200,120,55,0.1)
    line:
      color: RGBA(200,120,55,0.2)
      shape: line
      width: 2
    x:
      - $ex hass.states["number.ld2450_r2x0"].state
      - $ex hass.states["number.ld2450_r2x0"].state
      - $ex hass.states["number.ld2450_r2x1"].state
      - $ex hass.states["number.ld2450_r2x1"].state
      - $ex hass.states["number.ld2450_r2x0"].state
    'y':
      - $ex hass.states["number.ld2450_r2y0"].state
      - $ex hass.states["number.ld2450_r2y1"].state
      - $ex hass.states["number.ld2450_r2y1"].state
      - $ex hass.states["number.ld2450_r2y0"].state
      - $ex hass.states["number.ld2450_r2y0"].state
  - entity: ''
    name: Coverage
    mode: lines
    fill: tonexty
    fillcolor: rgba(168, 216, 234, 0.08)
    line:
      shape: line
      width: 1
      dash: dot
    x:
      - 0
      - $ex 600 * Math.sin((2 * Math.PI)/360 * 60)
      - 450
      - 400
      - 300
      - 200
      - 100
      - 0
      - -100
      - -200
      - -300
      - -400
      - -450
      - $ex -600 * Math.sin((2 * Math.PI)/360 * 60)
      - 0
    'y':
      - 0
      - $ex 600 * Math.cos((2 * Math.PI)/360 * 60)
      - $ex Math.sqrt( 600**2 - 450**2 )
      - $ex Math.sqrt( 600**2 - 400**2 )
      - $ex Math.sqrt( 600**2 - 300**2 )
      - $ex Math.sqrt( 600**2 - 200**2 )
      - $ex Math.sqrt( 600**2 - 100**2 )
      - 600
      - $ex Math.sqrt( 600**2 - 100**2 )
      - $ex Math.sqrt( 600**2 - 200**2 )
      - $ex Math.sqrt( 600**2 - 300**2 )
      - $ex Math.sqrt( 600**2 - 400**2 )
      - $ex Math.sqrt( 600**2 - 450**2 )
      - $ex 600 * Math.cos((2 * Math.PI)/360 * 60)
      - 0
raw_plotly_config: true
